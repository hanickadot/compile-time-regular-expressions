#include <ctre.hpp>
#include <string_view>

template <typename T> struct identify;
template <size_t N> struct number_id;


#if !__cpp_nontype_template_parameter_class
#define CTRE_CREATE(pattern) (pattern ## _ctre)
#define CTRE_SYNTAX(pattern) (pattern ## _ctre_syntax)
#define CTRE_GEN(pattern) decltype(pattern ## _ctre_gen)

#else

template <ctll::fixed_string input> constexpr auto create() {
	constexpr auto _input = input;
	
	using tmp = typename ctll::parser<ctre::pcre, _input, ctre::pcre_actions>::template output<ctre::pcre_context<>>;
	static_assert(tmp(), "Regular Expression contains syntax error.");
	using re = decltype(front(typename tmp::output_type::stack_type()));
	return ctre::regular_expression(re());
}

template <ctll::fixed_string input> constexpr bool syntax() {
	constexpr auto _input = input;
	
	return ctll::parser<ctre::pcre, _input, ctre::pcre_actions>::template correct_with<ctre::pcre_context<>>;
}

template <ctll::fixed_string input> constexpr auto gen() {
	constexpr auto _input = input;
	
	using tmp = typename ctll::parser<ctre::pcre, _input, ctre::pcre_actions>::template output<ctre::pcre_context<>>;
	static_assert(tmp(), "Regular Expression contains syntax error.");
	return typename tmp::output_type::stack_type();
}


#define CTRE_GEN(pattern) decltype(gen<pattern>())
#define CTRE_CREATE(pattern) create<pattern>()
#define CTRE_SYNTAX(pattern) syntax<pattern>()

#endif

using namespace ctre::literals;
using namespace ctre::test_literals;
using namespace std::string_view_literals;


//identify<decltype(ctll::fixed_string{u8"캩코캜콏"})> a;
//identify<decltype(CTRE_CREATE(u8"캩코캜콏"))> i;


//identify<CTRE_GEN(u8"a+")> a;
//identify<CTRE_GEN(u8"游땘")> b;

#if __cpp_char8_t
static_assert(CTRE_SYNTAX(u8"a+"));
static_assert(CTRE_SYNTAX(u8"游땘+"));
static_assert(CTRE_CREATE(u8"游땘").match(U"游땘"));
static_assert(CTRE_CREATE(u8"游땘+").match(U"游땘"));
static_assert(CTRE_CREATE(u8"游땘+").match(U"游땘游땘游땘游땘"));
static_assert(CTRE_CREATE(u8"[游땘a\\x{1F92A}]+").match(U"游땘a游땘aa游땘游땘a游뱕"));
static_assert(!CTRE_CREATE(u8"[游땘a\\x{1F92A}]+").match(U"游땘a游땘aa游땘游땘a游뱕x"));

constexpr auto m1 = CTRE_CREATE(u8"[游땘a-z\\x{1F92A}]+").match(U"abc游땘游땘xyz");
static_assert(m1.to_view().length() == 8);
#endif

static_assert(CTRE_SYNTAX(U"a+"));
static_assert(CTRE_SYNTAX(U"游땘+"));
static_assert(CTRE_CREATE(U"游땘").match(U"游땘"));
static_assert(CTRE_CREATE(U"游땘+").match(U"游땘"));
static_assert(CTRE_CREATE(U"游땘+").match(U"游땘游땘游땘游땘"));
static_assert(CTRE_CREATE(U"[游땘a\\x{1F92A}]+").match(U"游땘a游땘aa游땘游땘a游뱕"));
static_assert(!CTRE_CREATE(U"[游땘a\\x{1F92A}]+").match(U"游땘a游땘aa游땘游땘a游뱕x"));

constexpr auto m2 = CTRE_CREATE(U"[游땘a-z\\x{1F92A}]+").match(U"abc游땘游땘xyz");
static_assert(m2.to_view().length() == 8);

//identify<decltype(CTRE_CREATE(u8"游땘+"))> i;
//static_assert(CTRE_CREATE(u8"游땘+").match(U"游땘"));
//ctre::match<u8"游땘">(u8"游땘游땘游땘");

//static_assert(CTRE_CREATE(u8"游땘+").match(u8"游땘游땘游땘"));
static_assert(CTRE_CREATE(U"[캩코캜콏abc]+").match(U"캩캩c캩캩a콏"));
//static_assert(CTRE_CREATE(u"캩코캜콏").match(u8"캩코캜콏"));
//static_assert(CTRE_CREATE(L"캩코캜콏").match(u8"캩코캜콏"));
//static_assert(CTRE_CREATE(u8"캩코캜콏").match(u8"캩코캜콏"));
//
//static_assert(CTRE_SYNTAX("\\p{Latin}"));
//static_assert(!CTRE_SYNTAX("\\p{Latin42}"));
//
//static_assert(CTRE_CREATE("\\p{Latin}").match("a"sv));
//static_assert(CTRE_CREATE("\\p{Emoji}").match("a"sv));
//
